plugins {
	id "com.github.johnrengelman.shadow" version "5.0.0"
	id "org.jetbrains.kotlin.jvm"
}

configurations {
	// Use shadow to shade the file but NOT add it as a dependency
	shadowCommon
}

architectury {
	platformSetupLoomIde()
	fabric()
}

minecraft {
	accessWidener("../common/src/main/resources/valkyrienskies-common.accesswidener")
}

dependencies {
	minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
	mappings("net.fabricmc:yarn:${rootProject.yarn_mappings}:v2")
	modCompile("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

	implementation(project(path: ":common")) {
		transitive = false
	}
	developmentFabric(project(path: ":common")) {
		transitive = false
	}
	shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
		transitive = false
	}

	// Depend on the fabric kotlin mod
	modImplementation("net.fabricmc:fabric-language-kotlin:1.4.21+build.1")

	// Depend on the fabric API
	modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")

	// vs-core
	implementation("org.valkyrienskies.core:vs-core:${rootProject.vs_core_version}")
	shadowCommon("org.valkyrienskies.core:vs-core:${rootProject.vs_core_version}")
}

processResources {
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
	inputs.property "version", project.version
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	classifier "shadow"
}

remapJar {
	dependsOn(shadowJar)
	input.set(shadowJar.archivePath)
	archiveClassifier = "fabric"
}